package com.cities.geo.service;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cities.geo.VO.Suggestions;
import com.cities.geo.VO.geoname;
import com.fasterxml.jackson.core.exc.StreamReadException;
import com.fasterxml.jackson.databind.DatabindException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.google.common.base.Predicates;
import com.google.common.collect.FluentIterable;
import com.google.common.collect.Lists;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.stream.JsonReader;

@Service
public class geoService {

	public int Test(int a, int b) throws Exception
	{		
		return a*b;
	}

	public Suggestions Suggestions(Suggestions sug) throws Exception
	{
		return null;
	}

	public List<geoname> GetAll(geoname geo) throws StreamReadException, DatabindException, IOException
	{
		List<geoname> FL = new ArrayList<geoname>();
		        
		FL = ByName("London");
		FL = Score(FL, 42,-81);
		
		return FL;
	}
	
	public List<geoname> ByName(String Name) throws StreamReadException, DatabindException, IOException
	{
		String fileName = "test.json";
		List<geoname> sample2 = new ArrayList<geoname>();
		
        ObjectMapper mapper = new ObjectMapper().configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
        CollectionType collectionTypes = mapper.getTypeFactory().constructCollectionType(List.class, geoname.class);
        sample2 = mapper.readValue(new File(fileName), collectionTypes);

        List<geoname> filteredList = new ArrayList<geoname>();

        for (int i = 0; i < sample2.size()-1; i++)
        {
        	if (sample2.get(i).getAlt_name().contains(Name))
        	{
        		filteredList.add(sample2.get(i));
        		levenshteinSim("apple", "aaple");
			}
        }
        
		return filteredList;
	}
	
	public List<geoname> Score(List<geoname> FilList, double Lat, double Lon) throws StreamReadException, DatabindException, IOException
	{
		double ScLat;
		double ScLon;
		
		List<geoname> FilListNew = new ArrayList<geoname>();

        for (int i = 0; i < FilList.size()-1; i++)
        {
        	ScLat = FilList.get(i).getLat()-Lat;
        	ScLat = ScLat/10;
        	ScLat = 1 - ScLat;
        	ScLat = ScLat * 0.33;
        	
        	ScLon = FilList.get(i).getLongt()-Lon;
        	ScLon = ScLon/10;
        	ScLon = 1 - ScLon;
        	ScLon = ScLon * 0.33;
        	
        	FilList.get(i).setScore(FilList.get(i).getScore()+ScLat+ScLon);
        	
        	FilListNew.add(FilList.get(i));
        }
        
		return FilListNew;
	}
	
	public static double similarity(String s1, String s2)
	{
		if (s1.length() < s2.length())
		{
			String swap = s1; s1 = s2; s2 = swap;
		}
		int bigLen = s1.length();
		if (bigLen == 0) { return 1.0; /* both strings are zero length */ }
		return (bigLen - computeEditDistance(s1, s2)) / (double) bigLen;
	}
 

}

package com.cities.geo.service;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cities.geo.VO.Suggestions;
import com.cities.geo.VO.geoname;
import com.fasterxml.jackson.core.exc.StreamReadException;
import com.fasterxml.jackson.databind.DatabindException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.google.common.base.Predicates;
import com.google.common.collect.FluentIterable;
import com.google.common.collect.Lists;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.stream.JsonReader;

@Service
public class geoService {

	public int Test(int a, int b) throws Exception
	{		
		return a*b;
	}

	public Suggestions Suggestions(Suggestions sug) throws Exception
	{
		return null;
	}

	public List<geoname> GetAll(geoname geo) throws StreamReadException, DatabindException, IOException
	{
		List<geoname> sample2 = new ArrayList<geoname>();
		
        ObjectMapper mapper = new ObjectMapper().configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
        CollectionType collectionTypes = mapper.getTypeFactory().constructCollectionType(List.class, geoname.class);
        sample2 = mapper.readValue(new File("test.json"), collectionTypes);
/*
        List<geoname> filteredList = new ArrayList<geoname>();
        filteredList = sample2;
*/
        List<geoname> filtrada = 
        		Lists.newArrayList(FluentIterable.from(sample2).filter(
                Predicates.not(Predicates.equalTo("Cranberry Township"))));

        for (int i = 0; i < filtrada.size()-1; i++)
        {
        	if (filtrada.get(i).getName().equals("")) {
				
			}
        	
        	filtrada.remove(i);
        }
        
		return filtrada;
	}

}
